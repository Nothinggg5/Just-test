--[[
  Pro UI Library for Roblox Exploits
  Dark Neon Theme, Smooth Animations, Full Config and Bindings Support
  Tabs with Icons, Controls: Button, Toggle, Slider
  Credits page with stylish typography
  Designed for stable performance in exploits like Solara
  
  Author: Your AI Assistant
  Inspired by xsx/Rayfield design principles
  
  Usage: Paste into a LocalScript in exploiter environment.
]]

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")

-- Config paths
local CONFIG_FILE = "ProUILibraryConfig.json"

-- Default config
local defaultConfig = {
    ThemeAccent = {R=153, G=51, B=255},
    ThemeBackground = {R=18, G=18, B=28},
    SelectedTab = 1,
    ToggleKey = Enum.KeyCode.RightControl.Name,
    Settings = {
      EnableAnimations = true,
      EnableSounds = false,
    },
}

-- Utils
local function cloneTable(tbl)
    local t = {}
    for k,v in pairs(tbl) do
        if type(v) == "table" then
            t[k] = cloneTable(v)
        else
            t[k] = v
        end
    end
    return t
end

local function colorFromTable(t)
    return Color3.fromRGB(t.R or 255, t.G or 255, t.B or 255)
end

-- Config management
local function loadConfig(file, default)
    if isfile and isfile(file) then
        local success, data = pcall(function() return HttpService:JSONDecode(readfile(file)) end)
        if success and data then
            return cloneTable(data)
        end
    end
    if writefile then writefile(file, HttpService:JSONEncode(default)) end
    return cloneTable(default)
end

local function saveConfig(file, config)
    if writefile then
        pcall(function()
            writefile(file, HttpService:JSONEncode(config))
        end)
    end
end

local UIConfig = loadConfig(CONFIG_FILE, defaultConfig)

-- Root ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ProUILibrary"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer.PlayerGui
ScreenGui.Enabled = true

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 620, 0, 440)
mainFrame.Position = UDim2.new(0.5, -310, 0.5, -220)
mainFrame.BackgroundColor3 = colorFromTable(UIConfig.ThemeBackground)
mainFrame.BorderSizePixel = 0
mainFrame.AnchorPoint = Vector2.new(0, 0)
mainFrame.Parent = ScreenGui
mainFrame.Active = true

-- Neon Outline (using UIGradient & UIStroke)
local neonOutline = Instance.new("Frame")
neonOutline.Size = UDim2.new(1.02, 6, 1.02, 6)
neonOutline.Position = UDim2.new(-0.01, -3, -0.01, -3)
neonOutline.ZIndex = 0
neonOutline.BackgroundColor3 = colorFromTable(UIConfig.ThemeAccent)
neonOutline.BorderSizePixel = 0
neonOutline.Parent = mainFrame

local uiStroke = Instance.new("UIStroke")
uiStroke.Thickness = 3
uiStroke.Color = colorFromTable(UIConfig.ThemeAccent)
uiStroke.Parent = neonOutline

-- Soft shadow using ImageLabel
local shadow = Instance.new("ImageLabel")
shadow.Size = UDim2.new(1.05, 12, 1.05, 12)
shadow.Position = UDim2.new(-0.025, -6, -0.025, -6)
shadow.BackgroundTransparency = 1
shadow.Image = "rbxassetid://6886132108"
shadow.ImageTransparency = 0.7
shadow.ZIndex = -1
shadow.Parent = mainFrame

-- Dragging support
local dragging, dragStart, startPos = false, nil, nil
mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- HEADER
local header = Instance.new("Frame")
header.Size = UDim2.new(1, 0, 0, 52)
header.BackgroundColor3 = Color3.fromRGB(28, 28, 38)
header.BorderSizePixel = 0
header.Parent = mainFrame

local title = Instance.new("TextLabel")
title.Text = "Pro UI Library"
title.Font = Enum.Font.GothamBlack
title.TextSize = 26
title.TextColor3 = Color3.fromRGB(220, 220, 255)
title.BackgroundTransparency = 1
title.Position = UDim2.new(0, 20, 0, 12)
title.Size = UDim2.new(0, 400, 0, 28)
title.Parent = header

local function createIconButton(parent, position, imageId, tooltip, onClick)
    local btn = Instance.new("ImageButton")
    btn.Size = UDim2.new(0, 32, 0, 32)
    btn.Position = position
    btn.BackgroundTransparency = 1
    btn.Image = imageId
    btn.Parent = parent
    btn.MouseEnter:Connect(function() btn.ImageColor3 = colorFromTable(UIConfig.ThemeAccent) end)
    btn.MouseLeave:Connect(function() btn.ImageColor3 = Color3.new(1,1,1) end)
    btn.MouseButton1Click:Connect(onClick)
    -- tooltip can be implemented if needed
    return btn
end

local closeBtn = createIconButton(header, UDim2.new(1, -40, 0, 10), "rbxassetid://4450303482", "Close GUI", function()
    ScreenGui.Enabled = false
end)

local minimizeBtn = createIconButton(header, UDim2.new(1, -80, 0, 10), "rbxassetid://6031156553", "Minimize GUI", nil)
local minimized = false
minimizeBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        for _,v in pairs(mainFrame:GetChildren()) do
            if v ~= header and v ~= neonOutline and v ~= shadow then
                v.Visible = false
            end
        end
        mainFrame.Size = UDim2.new(0, 400, 0, 52)
    else
        for _,v in pairs(mainFrame:GetChildren()) do
            v.Visible = true
        end
        mainFrame.Size = UDim2.new(0, 620, 0, 440)
    end
end)

-- TAB BAR --
local tabs = {
    {Name = "Main", Icon = "rbxassetid://6031218402"}, -- home icon
    {Name = "Settings", Icon = "rbxassetid://6031231188"}, -- settings icon
    {Name = "Credits", Icon = "rbxassetid://6031304692"}, -- credits icon
}

local tabBar = Instance.new("Frame")
tabBar.BackgroundTransparency = 1
tabBar.Size = UDim2.new(1, -40, 0, 48)
tabBar.Position = UDim2.new(0, 20, 0, 60)
tabBar.Parent = mainFrame

local tabLayout = Instance.new("UIListLayout")
tabLayout.FillDirection = Enum.FillDirection.Horizontal
tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
tabLayout.Padding = UDim.new(0, 24)
tabLayout.Parent = tabBar

local tabButtons = {}
local tabPages = {}

local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -40, 1, -125)
contentFrame.Position = UDim2.new(0, 20, 0, 110)
contentFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 38)
contentFrame.BorderSizePixel = 0
contentFrame.Parent = mainFrame

local function createTab(name, iconId, index)
    local tabButton = Instance.new("ImageButton")
    tabButton.Size = UDim2.new(0, 140, 0, 48)
    tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    tabButton.BorderSizePixel = 0
    tabButton.Image = iconId
    tabButton.ScaleType = Enum.ScaleType.Fit
    tabButton.Parent = tabBar
    tabButton.Name = "TabButton" .. name

    local tabText = Instance.new("TextLabel")
    tabText.Size = UDim2.new(1, 0, 0, 20)
    tabText.Position = UDim2.new(0, 0, 1, -18)
    tabText.BackgroundTransparency = 1
    tabText.Text = name
    tabText.Font = Enum.Font.GothamBold
    tabText.TextSize = 16
    tabText.TextColor3 = Color3.fromRGB(180, 180, 255)
    tabText.Parent = tabButton

    local tabPage = Instance.new("Frame")
    tabPage.Size = UDim2.new(1, 0, 1, 0)
    tabPage.BackgroundTransparency = 1
    tabPage.Position = UDim2.new(0, 0, 0, 0)
    tabPage.Visible = (index == UIConfig.SelectedTab)
    tabPage.Parent = contentFrame

    tabButton.MouseButton1Click:Connect(function()
        for i, btn in pairs(tabButtons) do
            btn.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
            tabPages[i].Visible = false
        end
        tabButton.BackgroundColor3 = colorFromTable(UIConfig.ThemeAccent)
        tabPage.Visible = true
        UIConfig.SelectedTab = index
        saveConfig(CONFIG_FILE, UIConfig)
    end)

    table.insert(tabButtons, tabButton)
    table.insert(tabPages, tabPage)

    return tabPage
end

local mainTab = createTab("Main", tabs[1].Icon, 1)
local settingsTab = createTab("Settings", tabs[2].Icon, 2)
local creditsTab = createTab("Credits", tabs[3].Icon, 3)

-- CONTROL TEMPLATES --

-- Button
local function createButton(text, parent, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 180, 0, 42)
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 80)
    button.BorderColor3 = colorFromTable(UIConfig.ThemeAccent)
    button.BorderSizePixel = 2
    button.Font = Enum.Font.GothamSemibold
    button.TextSize = 18
    button.TextColor3 = Color3.fromRGB(180, 180, 255)
    button.Text = text
    button.AutoButtonColor = true
    button.Parent = parent
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = colorFromTable(UIConfig.ThemeAccent)}):Play()
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(50, 50, 80)}):Play()
        button.TextColor3 = Color3.fromRGB(180, 180, 255)
    end)
    button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)
    return button
end

-- Toggle (switch)
local function createToggle(text, parent, initial, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(0, 180, 0, 42)
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.65, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.Font = Enum.Font.GothamSemibold
    label.TextSize = 16
    label.TextColor3 = Color3.fromRGB(180, 180, 255)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local toggleBtn = Instance.new("ImageButton")
    toggleBtn.Size = UDim2.new(0, 50, 0, 26)
    toggleBtn.Position = UDim2.new(1, -55, 0, 8)
    toggleBtn.BackgroundTransparency = 1
    toggleBtn.Image = initial and "rbxassetid://15049621329" or "rbxassetid://15049623555"
    toggleBtn.Parent = container
    
    toggleBtn.MouseButton1Click:Connect(function()
        initial = not initial
        toggleBtn.Image = initial and "rbxassetid://15049621329" or "rbxassetid://15049623555"
        if callback then callback(initial) end
    end)

    return container, toggleBtn
end

-- Slider
local function createSlider(text, parent, minValue, maxValue, initial, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(0, 280, 0, 40)
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.3, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(180, 180, 255)
    label.Font = Enum.Font.GothamSemibold
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Text = text
    label.Parent = container

    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(0.6, 0, 0, 8)
    sliderBar.Position = UDim2.new(0.35, 0, 0, 16)
    sliderBar.BackgroundColor3 = colorFromTable(UIConfig.ThemeAccent)
    sliderBar.BorderSizePixel = 0
    sliderBar.Parent = container
    sliderBar.AnchorPoint = Vector2.new(0, 0.5)

    local sliderBall = Instance.new("ImageButton")
    sliderBall.Size = UDim2.new(0, 20, 0, 20)
    sliderBall.Position = UDim2.new(initial, -10, 0.5, -10)
    sliderBall.AnchorPoint = Vector2.new(0.5, 0.5)
    sliderBall.BackgroundTransparency = 1
    sliderBall.Image = "rbxassetid://6035027580"
    sliderBall.Parent = container

    local dragging = false

    sliderBall.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    sliderBall.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    sliderBall.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativeX = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
            sliderBall.Position = UDim2.new(relativeX, 0, 0.5, 0)
            if callback then callback(minValue + (maxValue - minValue) * relativeX) end
        end
    end)
    return container
end

-- Fill Main tab with demo controls
local demoLayout = Instance.new("UIListLayout")
demoLayout.Parent = mainTab
demoLayout.Padding = UDim.new(0, 16)
demoLayout.FillDirection = Enum.FillDirection.Vertical
demoLayout.SortOrder = Enum.SortOrder.LayoutOrder

createButton("Demo Button", mainTab, function() print("Button clicked!") end)
createToggle("Demo Toggle", mainTab, true, function(state) print("Toggle state:", state) end)
createSlider("Demo Slider", mainTab, 0, 100, 0.5, function(val) print("Slider value:", val) end)

-- Settings tab content
local settingsLayout = Instance.new("UIListLayout")
settingsLayout.Parent = settingsTab
settingsLayout.Padding = UDim.new(0, 18)
settingsLayout.FillDirection = Enum.FillDirection.Vertical
settingsLayout.SortOrder = Enum.SortOrder.LayoutOrder

-- Accent Color picker buttons
local accentLabel = Instance.new("TextLabel")
accentLabel.Text = "Accent Colors:"
accentLabel.Font = Enum.Font.GothamBold
accentLabel.TextSize = 18
accentLabel.TextColor3 = colorFromTable(UIConfig.ThemeAccent)
accentLabel.BackgroundTransparency = 1
accentLabel.Size = UDim2.new(1, -40, 0, 28)
accentLabel.Position = UDim2.new(0, 20, 0, 20)
accentLabel.Parent = settingsTab

local accentColors = {
    {R=153, G=51, B=255},
    {R=255, G=100, B=140},
    {R=100, G=200, B=255},
    {R=180, G=80, B=240},
}

local accentBtns = {}
local function updateAccentColor(colorTbl)
    UIConfig.ThemeAccent = cloneTable(colorTbl)
    for _, btn in pairs(tabButtons) do btn.BackgroundColor3 = colorFromTable(UIConfig.ThemeAccent) end
    neonOutline.BackgroundColor3 = colorFromTable(UIConfig.ThemeAccent)
    title.TextColor3 = colorFromTable(UIConfig.ThemeAccent)
    for _, btn in pairs(accentBtns) do
        btn.BorderColor3 = Color3.new(0,0,0)
    end
    saveConfig(CONFIG_FILE, UIConfig)
end

local btnSize = 32
for i, col in ipairs(accentColors) do
    local colBtn = Instance.new("TextButton")
    colBtn.Size = UDim2.new(0, btnSize, 0, btnSize)
    colBtn.Position = UDim2.new(0, 20 + (i - 1) * (btnSize + 10), 0, 60)
    colBtn.BackgroundColor3 = colorFromTable(col)
    colBtn.BorderSizePixel = 2
    colBtn.BorderColor3 = Color3.new(0,0,0)
    colBtn.Parent = settingsTab
    colBtn.ZIndex = 20

    colBtn.MouseButton1Click:Connect(function()
        updateAccentColor(col)
        colBtn.BorderColor3 = colorFromTable({R=255, G=255, B=255})
    end)
    table.insert(accentBtns, colBtn)
end

-- Keybind changer for toggle
local keybindLbl = Instance.new("TextLabel")
keybindLbl.Text = "Toggle GUI Keybind:"
keybindLbl.Font = Enum.Font.GothamBold
keybindLbl.TextSize = 18
keybindLbl.TextColor3 = colorFromTable(UIConfig.ThemeAccent)
keybindLbl.BackgroundTransparency = 1
keybindLbl.Size = UDim2.new(0, 250, 0, 28)
keybindLbl.Position = UDim2.new(0, 20, 0, 110)
keybindLbl.Parent = settingsTab

local keybindBtn = Instance.new("TextButton")
keybindBtn.Size = UDim2.new(0, 160, 0, 30)
keybindBtn.Position = UDim2.new(0, 20, 0, 150)
keybindBtn.BackgroundColor3 = Color3.fromRGB(40,40,60)
keybindBtn.TextColor3 = colorFromTable(UIConfig.ThemeAccent)
keybindBtn.Font = Enum.Font.GothamBold
keybindBtn.TextSize = 20
keybindBtn.Text = UIConfig.ToggleKey
keybindBtn.BorderSizePixel = 2
keybindBtn.BorderColor3 = colorFromTable(UIConfig.ThemeAccent)
keybindBtn.Parent = settingsTab

local listening = false
keybindBtn.MouseButton1Click:Connect(function()
    if listening then return end
    listening = true
    keybindBtn.Text = "Press any key..."
    local conn
    conn = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Keyboard then
            UIConfig.ToggleKey = input.KeyCode.Name
            keybindBtn.Text = UIConfig.ToggleKey
            saveConfig(CONFIG_FILE, UIConfig)
            listening = false
            conn:Disconnect()
        end
    end)
end)

-- Credits tab content
local creditsLabel = Instance.new("TextLabel")
creditsLabel.BackgroundTransparency = 1
creditsLabel.TextColor3 = colorFromTable(UIConfig.ThemeAccent)
creditsLabel.Position = UDim2.new(0, 20, 0, 20)
creditsLabel.Size = UDim2.new(1, -40, 1, -40)
creditsLabel.Font = Enum.Font.GothamBlack
creditsLabel.TextSize = 20
creditsLabel.TextWrapped = true
creditsLabel.Text = [[
Pro UI Library
Created by AI Assistant
Inspired by xsx and Rayfield
Designed for Roblox Exploits
2025
]]
creditsLabel.Parent = creditsTab

-- Toggle ScreenGui with keybind
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode.Name == UIConfig.ToggleKey then
            ScreenGui.Enabled = not ScreenGui.Enabled
        end
    end
end)

-- Save config every 7 seconds
spawn(function()
    while wait(7) do
        saveConfig(CONFIG_FILE, UIConfig)
    end
end)

-- Return library interface
local Library = {}

function Library:SetThemeAccent(color3)
    UIConfig.ThemeAccent = {R = math.floor(color3.R*255), G = math.floor(color3.G*255), B = math.floor(color3.B*255)}
    for _, btn in pairs(tabButtons) do btn.BackgroundColor3 = color3 end
    neonOutline.BackgroundColor3 = color3
    title.TextColor3 = color3
    saveConfig(CONFIG_FILE, UIConfig)
end

function Library:SetThemeBackground(color3)
    UIConfig.ThemeBackground = {R = math.floor(color3.R*255), G = math.floor(color3.G*255), B = math.floor(color3.B*255)}
    mainFrame.BackgroundColor3 = color3
    saveConfig(CONFIG_FILE, UIConfig)
end

function Library:Show()
    ScreenGui.Enabled = true
end

function Library:Hide()
    ScreenGui.Enabled = false
end

function Library:Toggle()
    ScreenGui.Enabled = not ScreenGui.Enabled
end

function Library:GetConfig()
    return cloneTable(UIConfig)
end

return Library
