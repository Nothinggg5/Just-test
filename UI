local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local ScreenGui
local MainFrame
local tabPages = {}

local ROOT_FOLDER = "MyExploitConfig"
local THEME_FOLDER = ROOT_FOLDER.."/Themes"
local SCRIPT_FOLDER = ROOT_FOLDER.."/ScriptConfigs"

local themeConfigPath = THEME_FOLDER.."/themeConfig.json"
local scriptConfigPath = SCRIPT_FOLDER.."/scriptConfig.json"

local function ensureFolder(path)
    if not isfolder(path) then
        makefolder(path)
    end
end

local function ensureFile(filepath, defaultData)
    if not isfile(filepath) then
        writefile(filepath, HttpService:JSONEncode(defaultData))
    end
end

local defaultThemeConfig = {
    Background = {R=18, G=18, B=28},
    Accent = {R=153, G=51, B=255},
    Button = {R=70, G=55, B=105},
    TabButton = {R=80, G=50, B=140},
    ToggleOn = {R=120, G=180, B=120},
    ToggleOff = {R=170, G=170, B=170},
    SliderFill = {R=155, G=65, B=240},
    Text = {R=215, G=215, B=225},
}

local defaultScriptConfig = {
    ToggleKey = "RightControl",
    UIVisible = true,
    CurrentTab = "Main"
}

ensureFolder(ROOT_FOLDER)
ensureFolder(THEME_FOLDER)
ensureFolder(SCRIPT_FOLDER)

ensureFile(themeConfigPath, defaultThemeConfig)
ensureFile(scriptConfigPath, defaultScriptConfig)

local function loadConfig(path)
    if isfile(path) then
        local ok, data = pcall(function()
            return HttpService:JSONDecode(readfile(path))
        end)
        if ok and data then
            return data
        end
    end
    return nil
end

local function saveConfig(path, data)
    writefile(path, HttpService:JSONEncode(data))
end

local function fillThemeDefaults(config)
    local def = defaultThemeConfig
    config = config or {}
    for k, v in pairs(def) do
        if type(v) == "table" then
            if type(config[k]) ~= "table" then config[k] = {} end
            for colorKey, colorVal in pairs(v) do
                if type(config[k][colorKey]) ~= "number" then
                    config[k][colorKey] = colorVal
                end
            end
        else
            if config[k] == nil then
                config[k] = v
            end
        end
    end
    return config
end

local function getColor3(t)
    if t and type(t) == "table" and t.R and t.G and t.B then
        return Color3.fromRGB(t.R, t.G, t.B)
    else
        return Color3.new(1,1,1)
    end
end

local themeConfig = fillThemeDefaults(loadConfig(themeConfigPath))
local scriptConfig = loadConfig(scriptConfigPath) or defaultScriptConfig

local UIRefs = {
    MainFrame = nil,
    TabsBar = nil,
    TabButtons = {},
    Buttons = {},
    Toggles = {},
    SliderFills = {},
    Labels = {},
}

local function applyTheme()
    if not UIRefs.MainFrame then return end
    UIRefs.MainFrame.BackgroundColor3 = getColor3(themeConfig.Background)

    for _, btn in pairs(UIRefs.TabButtons) do
        btn.BackgroundColor3 = getColor3(themeConfig.TabButton)
        btn.TextColor3 = getColor3(themeConfig.Text)
    end

    for _, btn in pairs(UIRefs.Buttons) do
        btn.BackgroundColor3 = getColor3(themeConfig.Button)
        btn.TextColor3 = getColor3(themeConfig.Text)
    end

    for _, toggle in pairs(UIRefs.Toggles) do
        local on = toggle:GetAttribute("State")
        toggle.BackgroundColor3 = on and getColor3(themeConfig.ToggleOn) or getColor3(themeConfig.ToggleOff)
    end

    for _, fill in pairs(UIRefs.SliderFills) do
        fill.BackgroundColor3 = getColor3(themeConfig.SliderFill)
    end

    for _, lbl in pairs(UIRefs.Labels) do
        lbl.TextColor3 = getColor3(themeConfig.Text)
    end
end

local function createButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 160, 0, 40)
    button.BackgroundColor3 = getColor3(themeConfig.Button)
    button.BorderColor3 = Color3.fromRGB(110, 85, 170)
    button.BorderSizePixel = 1
    button.Text = text
    button.Font = Enum.Font.GothamBold
    button.TextSize = 18
    button.TextColor3 = getColor3(themeConfig.Text)
    button.AutoButtonColor = false
    button.Parent = parent

    local uicorner = Instance.new("UICorner")
    uicorner.CornerRadius = UDim.new(0, 10)
    uicorner.Parent = button

    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = getColor3(themeConfig.Accent)}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.3), {BackgroundColor3 = getColor3(themeConfig.Button)}):Play()
    end)
    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = getColor3(themeConfig.TabButton)}):Play()
    end)
    button.MouseButton1Up:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = getColor3(themeConfig.Accent)}):Play()
        if callback then callback() end
    end)

    table.insert(UIRefs.Buttons, button)
    return button
end

local function createToggle(parent, text, initialState, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 160, 0, 40)
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = Instance.new("TextLabel")
    label.Text = text
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = getColor3(themeConfig.Text)
    label.Font = Enum.Font.GothamBold
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    table.insert(UIRefs.Labels, label)

    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 42, 0, 24)
    toggle.Position = UDim2.new(0.75, 0, 0.2, 0)
    toggle.BackgroundColor3 = initialState and getColor3(themeConfig.ToggleOn) or getColor3(themeConfig.ToggleOff)
    toggle.BorderColor3 = Color3.fromRGB(100, 100, 100)
    toggle.BorderSizePixel = 1
    toggle.Text = ""
    toggle.Parent = frame
    toggle.AutoButtonColor = false

    local uicorner = Instance.new("UICorner")
    uicorner.CornerRadius = UDim.new(0, 12)
    uicorner.Parent = toggle

    local state = initialState
    toggle:SetAttribute("State", state)

    toggle.MouseEnter:Connect(function()
        if state then
            TweenService:Create(toggle, TweenInfo.new(0.2), {BackgroundColor3 = Color3.new(0.55, 0.85, 0.55)}):Play()
        else
            TweenService:Create(toggle, TweenInfo.new(0.2), {BackgroundColor3 = Color3.new(0.7, 0.7, 0.7)}):Play()
        end
    end)
    toggle.MouseLeave:Connect(function()
        TweenService:Create(toggle, TweenInfo.new(0.3), {BackgroundColor3 = state and getColor3(themeConfig.ToggleOn) or getColor3(themeConfig.ToggleOff)}):Play()
    end)
    toggle.MouseButton1Click:Connect(function()
        state = not state
        toggle:SetAttribute("State", state)
        TweenService:Create(toggle, TweenInfo.new(0.15), {BackgroundColor3 = state and getColor3(themeConfig.ToggleOn) or getColor3(themeConfig.ToggleOff)}):Play()
        if callback then callback(state) end
    end)

    table.insert(UIRefs.Toggles, toggle)
    return frame, function () return state end
end

local function createSlider(parent, text, minValue, maxValue, initialValue, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 320, 0, 40)
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = Instance.new("TextLabel")
    label.Text = text
    label.Size = UDim2.new(0.3, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = getColor3(themeConfig.Text)
    label.Font = Enum.Font.GothamBold
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    table.insert(UIRefs.Labels, label)

    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(0.65, 0, 0, 28)
    sliderBar.Position = UDim2.new(0.35, 0, 0.5, -14)
    sliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    sliderBar.BorderColor3 = Color3.fromRGB(100, 100, 130)
    sliderBar.BorderSizePixel = 1
    sliderBar.Parent = frame

    local uicornerBar = Instance.new("UICorner")
    uicornerBar.CornerRadius = UDim.new(0, 10)
    uicornerBar.Parent = sliderBar

    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((initialValue - minValue) / (maxValue - minValue), 0, 1, 0)
    sliderFill.BackgroundColor3 = getColor3(themeConfig.SliderFill)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBar

    local uicornerFill = Instance.new("UICorner")
    uicornerFill.CornerRadius = UDim.new(0, 10)
    uicornerFill.Parent = sliderFill

    local dragging = false

    local function updateFill(value)
        local clamped = math.clamp(value, minValue, maxValue)
        local ratio = (clamped - minValue) / (maxValue - minValue)
        sliderFill:TweenSize(UDim2.new(ratio, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true)
        if callback then
            callback(clamped)
        end
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            local mouseX = UserInputService:GetMouseLocation().X
            local sliderPosX = sliderBar.AbsolutePosition.X
            local sliderWidth = sliderBar.AbsoluteSize.X
            local pos = math.clamp(mouseX - sliderPosX, 0, sliderWidth)
            updateFill(minValue + (maxValue - minValue) * (pos / sliderWidth))
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    frame.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouseX = UserInputService:GetMouseLocation().X
            local sliderPosX = sliderBar.AbsolutePosition.X
            local sliderWidth = sliderBar.AbsoluteSize.X
            local pos = math.clamp(mouseX - sliderPosX, 0, sliderWidth)
            updateFill(minValue + (maxValue - minValue) * (pos / sliderWidth))
        end
    end)

    table.insert(UIRefs.SliderFills, sliderFill)
    return frame
end

local function showLabelWithFade(label)
    label.TextTransparency = 1
    label.Visible = true
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(label, tweenInfo, {TextTransparency = 0})
    tween:Play()
end

local function createTab(name, pageLabelText)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 140, 0, 44)
    btn.BackgroundColor3 = getColor3(themeConfig.TabButton)
    btn.BorderSizePixel = 0
    btn.Text = name
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 18
    btn.TextColor3 = getColor3(themeConfig.Text)
    btn.Parent = TabsBar

    local buttonGradient = Instance.new("UIGradient")
    buttonGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(110, 70, 200)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(70, 40, 150))
    }
    buttonGradient.Rotation = 90
    buttonGradient.Parent = btn

    table.insert(UIRefs.TabButtons, btn)

    local page = Instance.new("ScrollingFrame")
    page.Size = UDim2.new(1, 0, 1, 0)
    page.BackgroundColor3 = getColor3(themeConfig.Background)
    page.BackgroundTransparency = 0.7
    page.Visible = false
    page.ScrollBarThickness = 6
    page.ScrollBarImageColor3 = getColor3(themeConfig.Accent)
    page.Parent = ContentFrame

    -- Создаём label с конкретным названием, чтобы избежать ошибок
    local label = Instance.new("TextLabel")
    label.Name = "PageLabel"
    label.Size = UDim2.new(1, 0, 0, 28)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = pageLabelText
    label.Font = Enum.Font.GothamBold
    label.TextSize = 28
    label.TextColor3 = getColor3(themeConfig.Text)
    label.Parent = page
    label.LayoutOrder = 1
    table.insert(UIRefs.Labels, label)

    local textStroke = Instance.new("UIStroke")
    textStroke.Thickness = 1.5
    textStroke.Color = Color3.new(0, 0, 0)
    textStroke.Transparency = 0.7
    textStroke.Parent = label

    local UIListLayoutPage = Instance.new("UIListLayout")
    UIListLayoutPage.FillDirection = Enum.FillDirection.Vertical
    UIListLayoutPage.Padding = UDim.new(0, 16)
    UIListLayoutPage.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayoutPage.Parent = page
    UIListLayoutPage.HorizontalAlignment = Enum.HorizontalAlignment.Left

    UIListLayoutPage:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        page.CanvasSize = UDim2.new(0, 0, 0, UIListLayoutPage.AbsoluteContentSize.Y + 16)
    end)

    btn.MouseButton1Click:Connect(function()
        for _, v in pairs(tabPages) do
            if v.page.Visible then
                local tweenOut = TweenService:Create(v.page, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                tweenOut.Completed:Connect(function()
                    v.page.Visible = false
                    -- Безопасный доступ к label
                    local lbl = v.page:FindFirstChild("PageLabel")
                    if lbl then
                        lbl.Visible = false
                    end
                end)
                tweenOut:Play()
            else
                local lbl = v.page:FindFirstChild("PageLabel")
                if lbl then
                    lbl.Visible = false
                end
            end
            TweenService:Create(v.button, TweenInfo.new(0.3), {BackgroundColor3 = getColor3(themeConfig.TabButton)}):Play()
        end
        page.Visible = true
        page.BackgroundTransparency = 0.7
        local tweenIn = TweenService:Create(page, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.7})
        tweenIn:Play()
        TweenService:Create(btn, TweenInfo.new(0.3), {BackgroundColor3 = getColor3(themeConfig.Accent)}):Play()
        local lbl = page:FindFirstChild("PageLabel")
        if lbl then
            lbl.Visible = true
            showLabelWithFade(lbl)
        end
    end)

    tabPages[#tabPages + 1] = {button = btn, page = page, label = label}
    return page
end

-- Основная функция создания интерфейса
local function createUI()
    if ScreenGui then
        ScreenGui:Destroy()
    end

    ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "ProExploitGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.Enabled = true

    MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainFrame.Size = UDim2.new(0, 700, 0, 480)
    MainFrame.BackgroundColor3 = getColor3(themeConfig.Background)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    UIRefs.MainFrame = MainFrame
    MainFrame.Visible = true

    local Header = Instance.new("Frame")
    Header.Name = "Header"
    Header.Size = UDim2.new(1, 0, 0, 48)
    Header.BackgroundColor3 = Color3.fromRGB(30, 30, 38)
    Header.BorderSizePixel = 0
    Header.Parent = MainFrame

    local headerGradient = Instance.new("UIGradient")
    headerGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 0, 120)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 0, 80))
    }
    headerGradient.Rotation = 90
    headerGradient.Parent = Header

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Text = "Pro UI Library"
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 24
    TitleLabel.TextColor3 = getColor3(themeConfig.Text)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, 12, 0, 8)
    TitleLabel.Size = UDim2.new(0, 200, 0, 32)
    TitleLabel.Parent = Header
    table.insert(UIRefs.Labels, TitleLabel)

    local dragging = false
    local dragStart = nil
    local startPos = nil

    Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    TabsBar = Instance.new("Frame")
    TabsBar.Size = UDim2.new(1, -40, 0, 48)
    TabsBar.Position = UDim2.new(0, 20, 0, 58)
    TabsBar.BackgroundColor3 = getColor3(themeConfig.TabButton)
    TabsBar.BorderSizePixel = 0
    TabsBar.Parent = MainFrame
    UIRefs.TabsBar = TabsBar

    local tabsGradient = Instance.new("UIGradient")
    tabsGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 30, 150)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 20, 90))
    }
    tabsGradient.Rotation = 90
    tabsGradient.Parent = TabsBar

    local UIListLayoutTabs = Instance.new("UIListLayout")
    UIListLayoutTabs.FillDirection = Enum.FillDirection.Horizontal
    UIListLayoutTabs.Padding = UDim.new(0, 20)
    UIListLayoutTabs.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayoutTabs.Parent = TabsBar

    ContentFrame = Instance.new("Frame")
    ContentFrame.Size = UDim2.new(1, -40, 1, -120)
    ContentFrame.Position = UDim2.new(0, 20, 0, 110)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Parent = MainFrame

    tabPages = {}

    -- Создаём вкладки
    local mainPage = createTab("Main", "Главная страница")
    local settingsPage = createTab("Settings", "Настройки")
    createTab("Credits", "Кредиты")

    -- Установить активную вкладку
    for _, v in pairs(tabPages) do
        v.page.Visible = false
        -- Безопасное скрытие лейбла
        local label = v.page:FindFirstChild("PageLabel")
        if label then label.Visible = false end
        TweenService:Create(v.button, TweenInfo.new(0.3), {BackgroundColor3 = getColor3(themeConfig.TabButton)}):Play()
    end
    if tabPages[1] then
        tabPages[1].page.Visible = true
        local label = tabPages[1].page:FindFirstChild("PageLabel")
        if label then label.Visible = true end
        tabPages[1].button.BackgroundColor3 = getColor3(themeConfig.Accent)
        if label then showLabelWithFade(label) end
    end

    -- Далее добавляем остальные элементы UI на вкладке Settings, как ранее
    -- (для краткости не дублирую – добавь из предыдущих полных вариантов, обращая внимание на поиск PageLabel через FindFirstChild)
end

createUI()
