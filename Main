ты кстати lidarshow забыл

Вот полный плагин с добавлением команды lidarshow и улучшенной логикой, чтобы бот был проинформирован о всех направлениях и мог полноценно работать с командами lidarrandom, lidarfollow и lidarchase:

```lua
local Plugin = {
    PluginName = "UltimateLidarNavigatorEnhanced",
    PluginDescription = "LIDAR навигатор с 360° обзором, обучением карты, преследованием, следованием и визуализацией",
    Commands = {}
}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Debris = game:GetService("Debris")

local localPlayer = Players.LocalPlayer

local moving = false
local parkourMode = false
local followMode = nil
local currentTarget = nil
local connections = {}

local scanRadiusBase = 160
local safeDistance = 3
local maxJumpHeight = 7
local updateIntervalBase = 0.015

local dangerTags = {"damage", "lava", "fire", "kill", "trap", "spike", "acid", "death"}

local exploredMap = {}

local function getCharacter(player)
    if not player or not player.Character then return nil, nil, nil end
    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    return player.Character, hrp, humanoid
end

local function isDangerPart(part)
    if not part or not part:IsA("BasePart") then return false end
    local name = part.Name:lower()
    for _, tag in pairs(dangerTags) do
        if name:find(tag) then return true end
    end
    if part:GetAttribute("Danger") == true then return true end
    return false
end

local function checkDangerNearby(pos, radius)
    local region = Region3.new(pos - Vector3.new(radius,radius,radius), pos + Vector3.new(radius,radius,radius))
    local parts = Workspace:FindPartsInRegion3WithIgnoreList(region, {localPlayer.Character}, 40)
    for _, p in pairs(parts) do
        if isDangerPart(p) then return true end
    end
    return false
end

local function isPathDangerous(startPos, endPos, excludeModel)
    local direction = (endPos - startPos).Unit
    local distance = (endPos - startPos).Magnitude
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {excludeModel}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    local ray = Workspace:Raycast(startPos, direction * distance, rayParams)
    return ray and isDangerPart(ray.Instance)
end

local function generateFullSpherePoints(radius, steps)
    local points = {}
    for i = 0, steps do
        local theta = math.pi * i / steps
        for j = 0, 2 * steps do
            local phi = 2 * math.pi * j / (2 * steps)
            local x = radius * math.sin(theta) * math.cos(phi)
            local y = radius * math.cos(theta)
            local z = radius * math.sin(theta) * math.sin(phi)
            table.insert(points, Vector3.new(x, y, z))
        end
    end
    return points
end

local scanPoints = generateFullSpherePoints(scanRadiusBase, 20)
local lastPositions = {}
local stepSize = 9

local function markExplored(pos)
    local key = string.format("%.1f_%.1f_%.1f", pos.X, pos.Y, pos.Z)
    exploredMap[key] = true
end

local function isExplored(pos)
    local key = string.format("%.1f_%.1f_%.1f", pos.X, pos.Y, pos.Z)
    return exploredMap[key] or false
end

local function isSafeToMoveTo(position, hrp)
    local rayOrigin = position + Vector3.new(0, 2, 0)
    local rayDirection = Vector3.new(0, -5, 0)
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {hrp.Parent}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    local ray = Workspace:Raycast(rayOrigin, rayDirection, rayParams)
    return ray and not isDangerPart(ray.Instance)
end

local function avoidObstacles(hrp, proposedPos)
    local character = hrp.Parent
    if not character then return proposedPos end
    local dir = (proposedPos - hrp.Position).Unit
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist

    local offsets = {
        dir,
        (dir + Vector3.new(1, 0, 0)).Unit,
        (dir + Vector3.new(-1, 0, 0)).Unit,
        (dir + Vector3.new(0, 0, 1)).Unit,
        (dir + Vector3.new(0, 0, -1)).Unit,
        (dir + Vector3.new(1, 0, 1)).Unit,
        (dir + Vector3.new(-1, 0, 1)).Unit,
        (dir + Vector3.new(1, 0, -1)).Unit,
        (dir + Vector3.new(-1, 0, -1)).Unit,
    }

    for _, altDir in ipairs(offsets) do
        local ray = Workspace:Raycast(hrp.Position + Vector3.new(0, 2, 0), altDir * stepSize, rayParams)
        if not ray or isDangerPart(ray.Instance) then
            if isSafeToMoveTo(hrp.Position + altDir * stepSize, hrp) then
                return hrp.Position + altDir * stepSize
            end
        end
    end

    return hrp.Position
end

local function selectNextStepAmbient(hrp, targetPos, lastDir)
    local origin = hrp.Position + Vector3.new(0, 2, 0)
    local bestScore = math.huge
    local bestPos, bestDir = nil, nil

    for _, offset in ipairs(scanPoints) do
        local pos = origin + offset
        if pos and not checkDangerNearby(pos, safeDistance) and not isPathDangerous(origin, pos, hrp.Parent) and isSafeToMoveTo(pos, hrp) then
            pos = avoidObstacles(hrp, pos)
            local dist = (pos - targetPos).Magnitude
            for _, prevPos in ipairs(lastPositions) do
                if prevPos and (pos - prevPos).Magnitude < stepSize * 0.6 then
                    dist = dist + 20
                end
            end
            local score = dist
            if lastDir and lastDir:Dot(offset.Unit) > 0.85 then
                score = score * 0.65
            end
            if score < bestScore then
                bestScore = score
                bestPos = pos
                bestDir = offset.Unit
            end
        end
    end

    if bestPos then
        table.insert(lastPositions, bestPos)
        if #lastPositions > 30 then
            table.remove(lastPositions, 1)
        end
    end

    return bestPos, bestDir
end

local function enhancedStepUp(hrp, humanoid, nextPoint)
    if not nextPoint or not humanoid then return false end
    if humanoid.FloorMaterial == Enum.Material.Air then return false end

    local verticalDist = nextPoint.Y - hrp.Position.Y
    local horizDist = (Vector3.new(nextPoint.X, 0, nextPoint.Z) - Vector3.new(hrp.Position.X, 0, hrp.Position.Z)).Magnitude

    if verticalDist <= 0 or verticalDist > maxJumpHeight or horizDist > stepSize * 1.5 then
        return false
    end

    local origin = hrp.Position + Vector3.new(0, 1.5, 0)
    local forward = (nextPoint - hrp.Position).Unit
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {hrp.Parent}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist

    local obstacleRay = Workspace:Raycast(origin, forward * stepSize, rayParams)
    local headClearRay = Workspace:Raycast(hrp.Position + Vector3.new(0, 3, 0), forward * stepSize, rayParams)

    if obstacleRay and not isDangerPart(obstacleRay.Instance) and not headClearRay then
        humanoid.WalkSpeed = humanoid.WalkSpeed * 1.2
        humanoid.Jump = true
        task.wait(0.22)
        humanoid.WalkSpeed = humanoid.WalkSpeed / 1.2
        return true
    end

    return false
end

local function predictTargetFuturePosition(tgtHRP, history)
    if #history < 2 then return tgtHRP.Position end
    local last = history[#history]
    local prev = history[#history - 1]
    local dt = last.Time - prev.Time
    if dt <= 0 then return tgtHRP.Position end
    local velocity = (last.Position - prev.Position) / dt
    return last.Position + velocity * 0.8
end

local function ultraLidarNavigate(hrp, humanoid, targetPos, targetVelHistory)
    moving = true
    local lastDir = nil
    local pathPoints = {hrp.Position}
    lastPositions = {}

    while moving and hrp and humanoid and (hrp.Position - targetPos).Magnitude > safeDistance do
        local predictedPos = targetVelHistory and predictTargetFuturePosition(targetPos, targetVelHistory) or targetPos
        local nextStep, chosenDir = selectNextStepAmbient(hrp, predictedPos, lastDir)

        if not nextStep then
            warn("[LIDAR] Нет безопасных путей, навигация прервана")
            break
        end

        if enhancedStepUp(hrp, humanoid, nextStep) then
            task.wait(parkourMode and 0.1 or 0.25)
        end

        humanoid:MoveTo(nextStep)
        humanoid.MoveToFinished:Wait()

        lastDir = chosenDir
        table.insert(pathPoints, nextStep)

        local key = string.format("%.1f_%.1f_%.1f", nextStep.X, nextStep.Y, nextStep.Z)
        exploredMap[key] = true

        task.wait(updateIntervalBase)
    end

    for i=1,#pathPoints-1 do
        local p1, p2 = pathPoints[i], pathPoints[i+1]
        local part = Instance.new("Part")
        part.Anchored = true
        part.CanCollide = false
        part.Size = Vector3.new(0.2, 0.2, (p1-p2).Magnitude)
        part.CFrame = CFrame.new((p1+p2)/2, p2)
        part.Material = Enum.Material.Neon
        part.Color = Color3.fromRGB(50, 160, 255)
        part.Parent = Workspace
        Debris:AddItem(part, 4)
    end
    moving = false
end

local function clearConnections()
    for _, conn in ipairs(connections) do
        if conn and conn.Connected then
            conn:Disconnect()
        end
    end
    connections = {}
    lastPositions = {}
end

Plugin.Commands["lidarrandom"] = {
    ListName = "lidarrandom",
    Description = "Интеллектуальное изучение всей карты с записью посещённых точек",
    Aliases = {},
    Function = function()
        clearConnections()
        followMode = "lidarrandom"
        print("[LIDAR] Запущено интеллектуальное изучение карты")
        local char, hrp, humanoid = getCharacter(localPlayer)
        if not char or not hrp or not humanoid then
            warn("[LIDAR] Персонаж или компоненты не найдены")
            return
        end
        moving = true
        coroutine.wrap(function()
            while moving do
                local tries = 0
                local candidatePos
                repeat
                    local dir = Vector3.new(math.random()*2-1, math.random()*0.4-0.2, math.random()*2-1).Unit
                    local dist = math.random(40, 140)
                    candidatePos = hrp.Position + dir * dist
                    local nearbyDanger = checkDangerNearby(candidatePos, safeDistance)
                    local key = string.format("%.1f_%.1f_%.1f", candidatePos.X, candidatePos.Y, candidatePos.Z)
                    local alreadyExplored = exploredMap[key]
                    tries = tries + 1
                    if tries > 50 then
                        candidatePos = nil
                        break
                    end
                until not nearbyDanger and not alreadyExplored
                if candidatePos then
                    ultraLidarNavigate(hrp, humanoid, candidatePos)
                end
                if math.random() < 0.3 then
                    task.wait(0.6 + math.random())
                end
                task.wait(0.6)
            end
        end)()
    end
}

Plugin.Commands["lidarfollow"] = {
    ListName = "lidarfollow [player]",
    Description = "Следование за игроком с адаптивным обходом препятствий",
    Aliases = {},
    Function = function(args)
        clearConnections()
        local Players = game:GetService("Players")
        local targetFilter = args and args[1] or "nearest"
        local targetPlayers = {}
        for _, p in pairs(Players:GetPlayers()) do
            if p.Name:lower():find(targetFilter:lower()) then
                table.insert(targetPlayers, p)
            end
        end
        if #targetPlayers == 0 then
            warn("[LIDAR] Цель для следования не найдена")
            return
        end
        currentTarget = targetPlayers[1]
        followMode = "lidarfollow"
        print("[LIDAR] Следую за "..currentTarget.Name)
        local conn = RunService.Heartbeat:Connect(function()
            if moving then return end
            if not currentTarget or not currentTarget.Character then return end
            local char, hrp, humanoid = getCharacter(localPlayer)
            local tgtChar, tgtHRP = getCharacter(currentTarget)
            if char and hrp and humanoid and tgtChar and tgtHRP then
                coroutine.wrap(function()
                    ultraLidarNavigate(hrp, humanoid, tgtHRP.Position)
                end)()
            end
        end)
        table.insert(connections, conn)
    end
}

Plugin.Commands["lidarchase"] = {
    ListName = "lidarchase [player]",
    Description = "Преследование игрока с прогнозом и тактикой засады",
    Aliases = {},
    Function = function(args)
        clearConnections()
        local Players = game:GetService("Players")
        local targetFilter = args and args[1] or "nearest"
        local targetPlayers = {}
        for _, p in pairs(Players:GetPlayers()) do
            if p.Name:lower():find(targetFilter:lower()) then
                table.insert(targetPlayers, p)
            end
        end
        if #targetPlayers == 0 then
            warn("[LIDAR] Цель для преследования не найдена")
            return
        end
        currentTarget = targetPlayers[1]
        parkourMode = true
        updateScanSettings()
        followMode = "lidarchase"
        print("[LIDAR] Начинаю преследование "..currentTarget.Name)
        local targetVelHistory = {}
        local conn = RunService.Heartbeat:Connect(function()
            if moving then return end
            if not currentTarget or not currentTarget.Character then return end
            local tgtHRP = currentTarget.Character:FindFirstChild("HumanoidRootPart")
            if not tgtHRP then return end
            table.insert(targetVelHistory, {Position = tgtHRP.Position, Time = os.clock()})
            if #targetVelHistory > 20 then
                table.remove(targetVelHistory, 1)
            end
            local char, hrp, humanoid = getCharacter(localPlayer)
            if char and hrp and humanoid then
                coroutine.wrap(function()
                    local predictedPos = predictTargetFuturePosition(tgtHRP, targetVelHistory)
                    local offsDir = (predictedPos - tgtHRP.Position).Unit
                    local ambushPos = tgtHRP.Position + offsDir * 7
                    ultraLidarNavigate(hrp, humanoid, ambushPos, targetVelHistory)
                end)()
            end
        end)
        table.insert(connections, conn)
    end
}

function updateScanSettings()
    if parkourMode then
        scanRadiusBase = 160
        updateIntervalBase = 0.015
        scanPoints = generateFullSpherePoints(scanRadiusBase, 20)
    else
        scanRadiusBase = 150
        updateIntervalBase = 0.02
        scanPoints = generateFullSpherePoints(scanRadiusBase, 15)
    end
end

Plugin.Commands["lidarshow"] = {
    ListName = "lidarshow",
    Description = "Визуализация всех LIDAR лучей в 3D пространстве",
    Aliases = {},
    Function = function()
        local char, hrp = getCharacter(localPlayer)
        if not hrp then
            print("[LIDAR] HumanoidRootPart не найден")
            return
        end
        local origin = hrp.Position + Vector3.new(0, 2, 0)
        local rayParams = RaycastParams.new()
        rayParams.FilterDescendantsInstances = {hrp.Parent}
        rayParams.FilterType = Enum.RaycastFilterType.Blacklist

        for _, offset in ipairs(scanPoints) do
            local ray = Workspace:Raycast(origin, offset, rayParams)
            local endPos = ray and ray.Position or (origin + offset)
            local part = Instance.new("Part")
            part.Anchored = true
            part.CanCollide = false
            part.Size = Vector3.new(0.06, 0.06, (endPos - origin).Magnitude)
            part.CFrame = CFrame.new((origin + endPos) / 2, endPos)
            part.Material = Enum.Material.Neon
            part.Color = Color3.fromRGB(0, 255, 0)
            part.Parent = Workspace
            Debris:AddItem(part, 1.5)
        end
        print("[LIDAR] Визуализация завершена")
    end
}

return Plugin

Цитаты:
[1] IMG_20250817_025546_903.jpg https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/images/88450565/70f7488d-985e-4f24-8d05-d826d1a3bba2/IMG_20250817_025546_903.jpg
