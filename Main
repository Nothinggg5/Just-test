local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")

local Plugin = {
    ["PluginName"] = "SmartNavigator",
    ["PluginDescription"] = "Умный tap-to-move, следование и построение пути с визуализацией и стоп-краном",
    ["Commands"] = {}
}

local smartTapEnabled = false
local moveConnection = nil
local followTask = nil
local pathTask = nil

local function drawDebugPath(points)
    for i = 1, #points - 1 do
        local part = Instance.new("Part")
        part.Anchored = true
        part.CanCollide = false
        part.Material = Enum.Material.Neon
        part.BrickColor = BrickColor.new("Bright yellow")
        local pos1 = points[i]
        local pos2 = points[i + 1]
        local dist = (pos2 - pos1).Magnitude
        part.Size = Vector3.new(0.15, 0.15, dist)
        part.CFrame = CFrame.new((pos1 + pos2) / 2, pos1) * CFrame.Angles(0, math.rad(90), 0)
        part.Parent = workspace
        game.Debris:AddItem(part, 4)
    end
end

local function stopAllMovement()
    if moveConnection then
        moveConnection:Disconnect()
        moveConnection = nil
    end
    if followTask then
        followTask = nil
    end
    if pathTask then
        pathTask = nil
    end
    local player = Players.LocalPlayer
    if player and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:MoveTo(player.Character.PrimaryPart.Position)
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
        end
    end
end

-- Команда stopmove - полная остановка
Plugin.Commands["stopmove"] = {
    ["ListName"] = "stopmove",
    ["Description"] = "Останавливает все движения и действия",
    ["Function"] = function(args, speaker)
        stopAllMovement()
    end
}

-- smarttap - включает/выключает умный tap-to-move
Plugin.Commands["smarttap"] = {
    ["ListName"] = "smarttap",
    ["Description"] = "Переключить умный tap-to-move (клик мыши - ходить)",
    ["Function"] = function(args, speaker)
        local player = Players.LocalPlayer
        smartTapEnabled = not smartTapEnabled

        if smartTapEnabled then
            if moveConnection then moveConnection:Disconnect() end
            moveConnection = player:GetMouse().Button1Down:Connect(function()
                if not smartTapEnabled then return end
                local char = player.Character
                if not char or not char.PrimaryPart then return end

                stopAllMovement()

                local mousePos = player:GetMouse().Hit.p
                local path = PathfindingService:CreatePath({
                    AgentRadius = 2,
                    AgentHeight = 5,
                    AgentCanJump = false,
                    AgentCanClimb = true,
                    AgentWalkableTypes = {Enum.Material.Grass, Enum.Material.Wood, Enum.Material.Concrete, Enum.Material.Metal}
                })

                path:ComputeAsync(char.PrimaryPart.Position, mousePos)

                if path.Status == Enum.PathStatus.Success then
                    local waypoints = path:GetWaypoints()
                    local points = {}
                    for i, wp in ipairs(waypoints) do
                        points[i] = wp.Position
                    end
                    drawDebugPath(points)

                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    if not humanoid then return end

                    for _, wp in ipairs(waypoints) do
                        humanoid:MoveTo(wp.Position)
                        local reached = humanoid.MoveToFinished:Wait()
                        if not reached then break end
                    end
                else
                    warn("Не удалось построить путь для smarttap")
                end
            end)
            print("SmartTap включен")
        else
            if moveConnection then
                moveConnection:Disconnect()
                moveConnection = nil
            end
            stopAllMovement()
            print("SmartTap выключен")
        end
    end
}

-- smartpath - построить и пройти путь к координатам
Plugin.Commands["smartpath"] = {
    ["ListName"] = "smartpath",
    ["Description"] = "Построить и пройти путь к координатам: smartpath x y z",
    ["Function"] = function(args, speaker)
        local x, y, z = tonumber(args[1]), tonumber(args[2]), tonumber(args[3])
        if not (x and y and z) then
            warn("Неверные координаты для smartpath")
            return
        end

        local player = Players.LocalPlayer
        local character = player.Character
        if not character or not character.PrimaryPart then return end

        stopAllMovement()

        pathTask = task.spawn(function()
            local startPos = character.PrimaryPart.Position
            local targetPos = Vector3.new(x, y, z)

            local path = PathfindingService:CreatePath({
                AgentRadius = 2,
                AgentHeight = 5,
                AgentCanJump = false,
                AgentCanClimb = true,
                AgentWalkableTypes = {Enum.Material.Grass, Enum.Material.Wood, Enum.Material.Concrete, Enum.Material.Metal}
            })

            path:ComputeAsync(startPos, targetPos)

            if path.Status == Enum.PathStatus.Success then
                local waypoints = path:GetWaypoints()
                local points = {}
                for i, wp in ipairs(waypoints) do
                    points[i] = wp.Position
                end
                drawDebugPath(points)

                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if not humanoid then return end

                for _, wp in ipairs(waypoints) do
                    humanoid:MoveTo(wp.Position)
                    local reached = humanoid.MoveToFinished:Wait()
                    if not reached then break end
                end
            else
                warn("Не удалось построить путь для smartpath")
            end
        end)
    end
}

-- smartfollow - следовать за игроком по селектору
Plugin.Commands["smartfollow"] = {
    ["ListName"] = "smartfollow",
    ["Description"] = "Следовать за игроком или группой: smartfollow <селектор>",
    ["Function"] = function(args, speaker)
        local selector = args[1]
        if not selector or selector == "" then
            warn("Укажите селектор для smartfollow")
            return
        end

        local player = Players.LocalPlayer
        local character = player.Character
        if not character or not character.PrimaryPart then return end

        stopAllMovement()

        local function resolveTargets(sel)
            sel = sel:lower()
            local targets = {}

            if sel == "me" then
                table.insert(targets, player)
            elseif sel == "all" then
                targets = Players:GetPlayers()
            elseif sel == "others" then
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= player then table.insert(targets, p) end
                end
            elseif sel == "random" then
                local plrs = Players:GetPlayers()
                if #plrs > 0 then
                    table.insert(targets, plrs[math.random(1, #plrs)])
                end
            elseif sel:sub(1,1) == "@" then
                local name = sel:sub(2)
                for _, p in pairs(Players:GetPlayers()) do
                    if p.Name:lower() == name then
                        table.insert(targets, p)
                        break
                    end
                end
            else
                -- Поиск игроков в команде с указанным именем
                for _, p in pairs(Players:GetPlayers()) do
                    if p.Team and p.Team.Name:lower() == sel then
                        table.insert(targets, p)
                    end
                end
            end
            return targets
        end

        followTask = task.spawn(function()
            while true do
                local targets = resolveTargets(selector)
                if #targets == 0 then break end
                local target = targets[1]
                if not target.Character or not target.Character.PrimaryPart then break end

                local startPos = character.PrimaryPart.Position
                local goalPos = target.Character.PrimaryPart.Position

                local path = PathfindingService:CreatePath({
                    AgentRadius = 2,
                    AgentHeight = 5,
                    AgentCanJump = false,
                    AgentCanClimb = true,
                    AgentWalkableTypes = {Enum.Material.Grass, Enum.Material.Wood, Enum.Material.Concrete, Enum.Material.Metal}
                })

                path:ComputeAsync(startPos, goalPos)

                if path.Status == Enum.PathStatus.Success then
                    local waypoints = path:GetWaypoints()
                    local points = {}
                    for i, wp in ipairs(waypoints) do
                        points[i] = wp.Position
                    end
                    drawDebugPath(points)

                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if not humanoid then break end

                    for _, wp in ipairs(waypoints) do
                        humanoid:MoveTo(wp.Position)
                        local reached = humanoid.MoveToFinished:Wait()
                        if not reached then break end
                    end
                else
                    warn("Не удалось построить путь для smartfollow")
                end

                task.wait(0.5)
            end
        end)
    end
}

return Plugin
